if &compatible
	set nocompatible
endif

if &t_Co > 2 || has("gui_running")
	syntax on
	set background=dark
endif

filetype on
filetype plugin on
filetype indent on

set fileformats=unix,dos

set encoding=utf-8
set fileencoding=utf-8

set backspace=indent,eol,start

set noexpandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set nowb
set noswapfile
set nobackup

set belloff=all

set listchars=eol:$,tab:→\\u0020,space:·

" Leader mappings

let mapleader = '\'

nnoremap <leader>rc :source ~/.vimrc<cr>
nnoremap <leader>lp :call LoadProject()<cr>

nnoremap <leader>el :set list<cr>
nnoremap <leader>dl :set nolist<cr>

nnoremap <leader>esc :setlocal spell spelllang=en_us<cr>
nnoremap <leader>dsc :setlocal nospell<cr>

" Quick 'n dirty way of loading a project into the editor.

function! LoadProject()
	if filereadable("scripts/project.vim")
		:source scripts/project.vim
	else
		:echo "No project file could be found."
	endif
endfunction

" I'm not a fan of the default behavior of highlighting matching pairs of
" parentheses.

function! DisableMatchParen()
	if exists(":NoMatchParen")
		:NoMatchParen
	endif
endfunction

augroup disable_match_paren
	autocmd!
	autocmd VimEnter * call DisableMatchParen()
augroup END

" Custom status line -- nothing too fancy!

highlight User1 ctermfg=15 ctermbg=0
highlight User2 ctermfg=0 ctermbg=7

let g:custom_status_line_modes = {
	\ 'n' : '[normal] ',
	\ 'i' : '[insert] ',
	\ 'c' : '[command]',
	\ 'v' : '[visual] ',
	\ 'R' : '[replace]'
	\}

function! GetModeForCustomStatusLine()
	return get(g:custom_status_line_modes,  mode(), '<none>')
endfunction

set laststatus=2

set statusline=%1*
set statusline+=\ %{GetModeForCustomStatusLine()}
set statusline+=\ %f%m%r
set statusline+=%=
set statusline+=%y
set statusline+=[%{&fenc}]
set statusline+=[%{&ff}]
set statusline+=\ %4l,%-5v
